<div class="modal" id="myModal">
  <div class="modal-content">
    <span class="close" id="close">&times;</span>
    <%= render 'image_carousel', itinerary: @itinerary, location: @locations %>
  </div>
</div>

<div class="show-page">
  <div class="row">
    <div class="col-5 window-view">
        <div class="itinerary-details d-flex">
          <div class='d-flex align-items-center p-0 m-0'>
            <h2 id="itinerary-name"><%= @itinerary.name %> </h2>
            <a href="#" id="review-button">
              <%= render 'review_button', itinerary: @itinerary %>
            </a>
          </div>
          <div class="d-flex align-items-center user-details-show">
          <% if @itinerary.user.photo.attached? %>
            <%= cl_image_tag @itinerary.user.photo.key, width: 50, height: 50, radius: :max, gravity: :face%>
          <% else %>
            <i style="font-size: 32px" class="fas fa-user-circle"></i>
          <% end %>
            <div>
              <h5>Built by</h3>
              <%= @itinerary.user.username %>
            </div>
          </div>

        </div>

    <% if !user_signed_in? || current_user.id != @itinerary.user_id %>
      <div>
        <%= render 'itinerary_details', itinerary: @itinerary, location: @location %>
      </div>
      <% else %>
      <div class="location-form" id="ajax-location-form">
        <%= render 'location_form', itinerary: @itinerary, location: @location %>
      </div>
    <% end %>

    <%= render 'horizontal_navbar' %>

    <div id="location-cards">
      <% @itinerary.locations.each do |location| %>
        <div>
          <%= link_to itinerary_location_path(@itinerary, location) do %>

          <%= render 'location', itinerary: @itinerary, location: location %>
        <% end %>
        </div>
      <% end %>
    </div>
  </div>

  <div class="col-7 p-0">
    <div
    id="map" class="itinerary-locations-map the-map"
    style="width: 100%;
    height: 90vh;"
    data-markers="<%= @markers.to_json %>"
    data-mapbox-api-key="<%= ENV['MAPBOX_API_KEY'] %>">
    </div>
    <div id="instructions"></div>
    <div class="review-form" id="ajax-review-form">
      <%= render 'review_form', itinerary: @itinerary, review: @review %>
    </div>
    <div id="review-show" class="review-cards">
      <h4><%= @itinerary.name.capitalize %> Reviews</h4>
      <div class="reviews-rating">
        <%= render 'review_rating', itinerary: @itinerary %>
      </div>
      <div class="review-cards-five">
        <% @reviews.last(5).reverse.each do |review| %>
          <%= render 'review', review: review %>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  mapboxgl.accessToken = 'pk.eyJ1Ijoic3RldmVzcGlkZXJzIiwiYSI6ImNrN2JqZW43MjAyM3YzcWxjb2VkZG9qNmUifQ.iMQH53oEUdtY8nAbUaAl3w';
    const mapElement = document.getElementById('map');
    let markers = JSON.parse(mapElement.dataset.markers);
    var start = [markers[0].lng, markers[0].lat];
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v10',
      center: [markers[0].lng, markers[0].lat], // starting position
      zoom: 12
    });
    // set the bounds of the map
    // var bounds = [[-123.069003, 45.395273], [-122.303707, 45.612333]];
    // map.setMaxBounds(bounds);

    // initialize the map canvas to interact with later
    var canvas = map.getCanvasContainer();

    // an arbitrary start will always be the same
    // only the end or destination will change

    // this is where the code for the next step will go
    // create a function to make a directions request
    function getRoute(end) {
      // make a directions request using cycling profile
      // an arbitrary start will always be the same
      // only the end or destination will change
      var start = [markers[0].lng, markers[0].lat];
      var url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;

      // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
      var req = new XMLHttpRequest();
      req.open('GET', url, true);
      req.onload = function() {
        var json = JSON.parse(req.response);
        var data = json.routes[0];
        var route = data.geometry.coordinates;
        var geojson = {
          type: 'Feature',
          properties: {},
          geometry: {
            type: 'LineString',
            coordinates: route
          }
        };
        // if the route already exists on the map, reset it using setData
        if (map.getSource('route')) {
          map.getSource('route').setData(geojson);
        } else { // otherwise, make a new request
          map.addLayer({
            id: 'route',
            type: 'line',
            source: {
              type: 'geojson',
              data: {
                type: 'Feature',
                properties: {},
                geometry: {
                  type: 'LineString',
                  coordinates: geojson
                }
              }
            },
            layout: {
              'line-join': 'round',
              'line-cap': 'round'
            },
            paint: {
              'line-color': '#3887be',
              'line-width': 5,
              'line-opacity': 0.75
            }
          });
        }
        // add turn instructions here at the end
        var instructions = document.getElementById('instructions');
        var steps = data.legs[0].steps;

        var tripInstructions = [];
        for (var i = 0; i < steps.length; i++) {
          tripInstructions.push('<br><li>' + steps[i].maneuver.instruction) + '</li>';
          instructions.innerHTML = '<br><span class="duration">Trip duration: ' + Math.floor(data.duration / 60) + ' min üö∂‚Äç‚ôÇÔ∏è </span>' + tripInstructions;
        }
      };
      req.send();
    }

    map.on('load', function() {
      // make an initial directions request that
      // starts and ends at the same location
      getRoute(start);

      // Add starting point to the map
      map.addLayer({
        id: 'point',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'FeatureCollection',
            features: [{
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'Point',
                coordinates: start
              }
            }
            ]
          }
        },
        paint: {
          'circle-radius': 10,
          'circle-color': '#3887be'
        }
      });

      for (let i = 1; i < markers.length; i++) {

        canvas.style.cursor = '';
        var coords = [markers[i].lng, markers[i].lat];
        var end = {
          type: 'FeatureCollection',
          features: [{
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'Point',
              coordinates: coords
            }
          }
          ]
        };
        if (map.getLayer('end')) {
          map.getSource('end').setData(end);
        } else {
          map.addLayer({
            id: 'end',
            type: 'circle',
            source: {
              type: 'geojson',
              data: {
                type: 'FeatureCollection',
                features: [{
                  type: 'Feature',
                  properties: {},
                  geometry: {
                    type: 'Point',
                    coordinates: coords
                  }
                }]
              }
            },
            paint: {
              'circle-radius': 10,
              'circle-color': '#f30'
            }
          });
        }
        getRoute(coords);
      }
    });

</script>


